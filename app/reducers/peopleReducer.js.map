{"version":3,"file":"peopleReducer.js","sourceRoot":"","sources":["../../Users/aivanychev/AngularStudy/PartyPlanner/tmp/broccoli_type_script_compiler-input_base_path-oEZfoxjS.tmp/0/src/app/reducers/peopleReducer.ts"],"names":[],"mappings":";AACA,0BAAqB,qBAAqB,CAAC,CAAA;AAE9B,uBAAe,GAAG;IAC7B,SAAS,EAAE,WAAW;IACtB,YAAY,EAAE,cAAc;IAC5B,gBAAgB,EAAE,kBAAkB;IACpC,UAAU,EAAE,YAAY;IACxB,aAAa,EAAE,eAAe;CAC/B,CAAA;AAED,IAAM,OAAO,GAAG,UAAC,KAAK,EAAE,MAAM;IAC5B,MAAM,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,KAAK,uBAAe,CAAC,SAAS;YAC5B,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,KAAK,EACL,EAAC,MAAM,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC,CAC3B,CAAC;YACJ,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACb,KAAK,uBAAe,CAAC,YAAY;YAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,KAAK,EACL,EAAC,MAAM,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC,CAC3B,CAAC;YACJ,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACb,KAAK,uBAAe,CAAC,gBAAgB;YACnC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,KAAK,EACL,EAAC,SAAS,EAAE,CAAC,KAAK,CAAC,SAAS,EAAC,CAC9B,CAAA;YACH,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QAEb;YACA,MAAM,CAAC,KAAK,CAAC;IACrB,CAAC;AACH,CAAC,CAAA;AAEY,qBAAa,GAAyB,UAAC,KAAiB,EAAE,MAAM;IAAzB,qBAAiB,GAAjB,UAAiB;IACnE,MAAM,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,KAAK,uBAAe,CAAC,UAAU;YAC7B,MAAM,CACD,KAAK;gBACR,IAAI,gBAAI,CACN,MAAM,CAAC,OAAO,CAAC,EAAE,EACjB,MAAM,CAAC,OAAO,CAAC,IAAI,EACnB,CAAC,EACD,KAAK,CACN;cACF,CAAC;QACF,KAAK,uBAAe,CAAC,aAAa;YAChC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,EAA5B,CAA4B,CAAC,CAAC;QAC9D,KAAK,uBAAe,CAAC,SAAS;YAC5B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAvB,CAAuB,CAAC,CAAC;QACtD,KAAK,uBAAe,CAAC,YAAY;YAC/B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAvB,CAAuB,CAAC,CAAC;QACtD,KAAK,uBAAe,CAAC,gBAAgB;YACnC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAvB,CAAuB,CAAC,CAAC;QACtD;YACE,MAAM,CAAC,KAAK,CAAC;IACnB,CAAC;AACH,CAAC,CAAA","sourcesContent":["import { ActionReducer, Action } from '@ngrx/store';\nimport { User } from '../models/userModel';\n\nexport const peopleActionMap = {\n  ADD_GUEST: 'ADD_GUEST',\n  REMOVE_GUEST: 'REMOVE_GUEST',\n  TOGGLE_ATTENDING: 'TOOGLE_ATTENDING',\n  ADD_PERSON: 'ADD_PERSON',\n  REMOVE_PERSON: 'REMOVE_PERSON'\n}\n\nconst details = (state, action) => {\n  switch(action.type) {\n    case peopleActionMap.ADD_GUEST:\n      if (state.id === action.payload) {\n        return Object.assign(\n          {},\n          state,\n          {guests: state.guests + 1}\n        );\n      }\n      return state;\n      case peopleActionMap.REMOVE_GUEST:\n        if (state.id === action.payload && state.guests > 0) {\n          return Object.assign(\n            {},\n            state,\n            {guests: state.guests - 1}\n          );\n        }\n        return state;\n        case peopleActionMap.TOGGLE_ATTENDING:\n          if (state.id === action.payload) {\n            return Object.assign(\n              {},\n              state,\n              {attending: !state.attending}\n            )\n          }\n          return state;\n\n          default:\n          return state;\n  }\n}\n\nexport const peopleReducer:ActionReducer<User[]> = (state:User[] = [], action) => {\n  switch(action.type) {\n    case peopleActionMap.ADD_PERSON:\n      return [\n        ...state,\n        new User(\n          action.payload.id,\n          action.payload.name,\n          0,\n          false\n        )\n      ];\n      case peopleActionMap.REMOVE_PERSON:\n        return state.filter(person => person.id !== action.payload);\n      case peopleActionMap.ADD_GUEST:\n        return state.map(person => details(person, action));\n      case peopleActionMap.REMOVE_GUEST:\n        return state.map(person => details(person, action));\n      case peopleActionMap.TOGGLE_ATTENDING:\n        return state.map(person => details(person, action));\n      default:\n        return state;\n  }\n}\n"]}